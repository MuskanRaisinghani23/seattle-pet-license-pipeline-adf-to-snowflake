{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "damg7370-adf-muskan"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Load_FCT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_seattle_pet_stage",
								"type": "DatasetReference"
							},
							"name": "sourceSnowflakeStage"
						},
						{
							"dataset": {
								"referenceName": "ds_seattle_pet_location_dim",
								"type": "DatasetReference"
							},
							"name": "sourceLocationDim"
						},
						{
							"dataset": {
								"referenceName": "ds_seattle_pet_breed_dim",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeFct",
								"type": "DatasetReference"
							},
							"name": "sourceSeattleFct"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable2",
								"type": "DatasetReference"
							},
							"name": "sourceDateDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeFct",
								"type": "DatasetReference"
							},
							"name": "sinkFct"
						}
					],
					"transformations": [
						{
							"name": "joinLocationDim"
						},
						{
							"name": "joinBreedDim"
						},
						{
							"name": "joinDateDim"
						},
						{
							"name": "joinFct"
						},
						{
							"name": "select"
						},
						{
							"name": "surrogateKey"
						},
						{
							"name": "derivedColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     JOB_ID as string (\"30\")",
						"}",
						"source(output(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceSnowflakeStage",
						"source(output(",
						"          LOCATION_SK as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocationDim",
						"source(output(",
						"          BREED_SK as string,",
						"          START_DT as string,",
						"          END_DT as string,",
						"          IS_CURRENT as string,",
						"          SPECIES_NAME as string,",
						"          BREED_DK as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"source(output(",
						"          PET_LIC_SK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) AS PET_LIC_SK FROM SEATTLE_PET_SCHEMA.PET_LIC_FCT',",
						"     format: 'query') ~> sourceSeattleFct",
						"source(output(",
						"          DT as string,",
						"          ABRV_DAY_NAME as string,",
						"          MONTH_NAME as string,",
						"          START_DAY_OF_MONTH as string,",
						"          END_DAY_OF_MONTH as string,",
						"          QUARTER_NUM as string,",
						"          DAY_OF_WEEK as string,",
						"          IS_WEEKEND as string,",
						"          YEAR_NUM as string,",
						"          MONTH_NUM as string,",
						"          DAY_NUM as string,",
						"          DATE_DIM_SK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDateDim",
						"sourceSnowflakeStage, sourceLocationDim join(sourceSnowflakeStage@ZIP_CODE == sourceLocationDim@ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocationDim",
						"joinLocationDim, sourceBreedDim join(SPECIES == SPECIES_NAME",
						"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBreedDim",
						"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDateDim",
						"joinDateDim, sourceSeattleFct join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFct",
						"joinFct select(mapColumn(",
						"          LICENSE_ISSUE_DATE,",
						"          LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_DIM_SK,",
						"          PET_LIC_SK",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select",
						"select keyGenerate(output(ROW_NUM as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey derive(PET_LIC_SK = ROW_NUM + PET_LIC_SK,",
						"          JOB_ID = $JOB_ID,",
						"          LOAD_DT = currentTimestamp()) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PET_LIC_SK as decimal(10,0),",
						"          DATE_SK as decimal(10,0),",
						"          LOCATION_SK as decimal(10,0),",
						"          BREED_SK as decimal(10,0),",
						"          LICENSE_NUMBER as decimal(38,0),",
						"          ANIMAL_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_JOB_DT as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          PET_LIC_SK,",
						"          DATE_SK = DATE_DIM_SK,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          LICENSE_NUMBER,",
						"          DI_JOB_ID = JOB_ID,",
						"          DI_JOB_DT = LOAD_DT",
						"     )) ~> sinkFct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Load_Location_Dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "geo_data_csv",
								"type": "DatasetReference"
							},
							"name": "sourceGeoFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_seattle_pet_location_dim",
								"type": "DatasetReference"
							},
							"name": "sinkLocationDim"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						},
						{
							"name": "derivedColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     JobID as string (\"20\")",
						"}",
						"source(output(",
						"          state_fips as short,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceGeoFile",
						"sourceGeoFile keyGenerate(output(SK_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey derive(DI_CREATED_DT = currentTimestamp(),",
						"          DI_JOB_ID = $JobID) ~> derivedColumns",
						"derivedColumns sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as decimal(10,0),",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_SK = SK_ID,",
						"          CITY = city,",
						"          STATE = state,",
						"          STATE_ABBR = state_abbr,",
						"          ZIP_CODE = zipcode,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = DI_CREATED_DT",
						"     )) ~> sinkLocationDim"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_seattle_pet_license')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "readTSVfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "V2_PET_LICENSE_STAGE",
								"type": "DatasetReference"
							},
							"name": "SinkSnowflake",
							"description": "Export data to V2_PET_LICENSE_STAGE"
						}
					],
					"transformations": [
						{
							"name": "TransposeColumns"
						},
						{
							"name": "PickRequiredColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Job_Id as string (\"10\")",
						"}",
						"source(output(",
						"          {License Issue Date} as string,",
						"          {License Number} as string,",
						"          {Animal's Name} as string,",
						"          Species as string,",
						"          {Primary Breed} as string,",
						"          {Secondary Breed} as string,",
						"          {ZIP Code} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> readTSVfile",
						"readTSVfile derive(LIC_ISSUE_DATE = toDate({License Issue Date}, 'MMMM dd yyyy', 'en-US'),",
						"          ZIP_Code = lpad(toString({ZIP Code}), 5, '0'),",
						"          Secondary_Breed = iifNull({Secondary Breed}, 'Unknown'),",
						"          Species_Upper = upper(Species),",
						"          License_Number = toInteger(translate({License Number}, 'S', '')),",
						"          {Animal's_Name} = translate({Animal's Name}, '()[]', ''),",
						"          Job_ID = $Job_Id,",
						"          Load_Dt = currentDate()) ~> TransposeColumns",
						"TransposeColumns select(mapColumn(",
						"          License_Issue_Date = LIC_ISSUE_DATE,",
						"          License_Number,",
						"          Animal_Name = {Animal's_Name},",
						"          Species = Species_Upper,",
						"          Primary_Breed = {Primary Breed},",
						"          Secondary_Breed,",
						"          ZIP_Code,",
						"          Job_ID,",
						"          Load_Dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> PickRequiredColumns",
						"PickRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as decimal(38,0),",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LICENSE_ISSUE_DATE = License_Issue_Date,",
						"          LICENSE_NUMBER = License_Number,",
						"          ANIMAL_NAME = Animal_Name,",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = Primary_Breed,",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = ZIP_Code,",
						"          DI_JOB_ID = Job_ID,",
						"          DI_LOAD_DT = Load_Dt",
						"     )) ~> SinkSnowflake"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Seattle_Pet_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanPetLicData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_seattle_pet_license",
								"type": "DataFlowReference",
								"parameters": {
									"Job_Id": {
										"value": "'@{substring(pipeline().RunId, 1, 10)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"readTSVfile": {
										"FileSource": "Seattle_Pet_Licenses_20250206.tsv"
									},
									"SinkSnowflake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "LoadBreedDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CleanPetLicData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Load_Breed_Dim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceSTAGE": {},
									"BreedDimMaxID": {},
									"sourceBreedDim": {},
									"sinkBreedDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "LoadFct",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadLocationDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Load_FCT",
								"type": "DataFlowReference",
								"parameters": {
									"JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceSnowflakeStage": {},
									"sourceLocationDim": {},
									"sourceBreedDim": {},
									"sourceSeattleFct": {},
									"sourceDateDim": {},
									"sinkFct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "LoadLocationDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadBreedDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Load_Location_Dim",
								"type": "DataFlowReference",
								"parameters": {
									"JobID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceGeoFile": {},
									"sinkLocationDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JOB_ID": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-18T04:56:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_seattle_pet_license')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Load_FCT')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Load_Location_Dim')]"
			]
		}
	]
}