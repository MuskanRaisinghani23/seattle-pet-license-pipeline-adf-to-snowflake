{
	"name": "DF_Load_FCT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_seattle_pet_stage",
						"type": "DatasetReference"
					},
					"name": "sourceSnowflakeStage"
				},
				{
					"dataset": {
						"referenceName": "ds_seattle_pet_location_dim",
						"type": "DatasetReference"
					},
					"name": "sourceLocationDim"
				},
				{
					"dataset": {
						"referenceName": "ds_seattle_pet_breed_dim",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeFct",
						"type": "DatasetReference"
					},
					"name": "sourceSeattleFct"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeFct",
						"type": "DatasetReference"
					},
					"name": "sinkFct"
				}
			],
			"transformations": [
				{
					"name": "joinLocationDim"
				},
				{
					"name": "joinBreedDim"
				},
				{
					"name": "joinDateDim"
				},
				{
					"name": "joinFct"
				},
				{
					"name": "select"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "derivedColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"30\")",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSnowflakeStage",
				"source(output(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocationDim",
				"source(output(",
				"          BREED_SK as string,",
				"          START_DT as string,",
				"          END_DT as string,",
				"          IS_CURRENT as string,",
				"          SPECIES_NAME as string,",
				"          BREED_DK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          PET_LIC_SK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) AS PET_LIC_SK FROM SEATTLE_PET_SCHEMA.PET_LIC_FCT',",
				"     format: 'query') ~> sourceSeattleFct",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"sourceSnowflakeStage, sourceLocationDim join(sourceSnowflakeStage@ZIP_CODE == sourceLocationDim@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationDim",
				"joinLocationDim, sourceBreedDim join(SPECIES == SPECIES_NAME",
				"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedDim",
				"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateDim",
				"joinDateDim, sourceSeattleFct join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFct",
				"joinFct select(mapColumn(",
				"          LICENSE_ISSUE_DATE,",
				"          LICENSE_NUMBER,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DATE_DIM_SK,",
				"          PET_LIC_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select",
				"select keyGenerate(output(ROW_NUM as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(PET_LIC_SK = ROW_NUM + PET_LIC_SK,",
				"          JOB_ID = $JOB_ID,",
				"          LOAD_DT = currentTimestamp()) ~> derivedColumn",
				"derivedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as decimal(10,0),",
				"          DATE_SK as decimal(10,0),",
				"          LOCATION_SK as decimal(10,0),",
				"          BREED_SK as decimal(10,0),",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          ANIMAL_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_JOB_DT as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK,",
				"          DATE_SK = DATE_DIM_SK,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          LICENSE_NUMBER,",
				"          DI_JOB_ID = JOB_ID,",
				"          DI_JOB_DT = LOAD_DT",
				"     )) ~> sinkFct"
			]
		}
	}
}